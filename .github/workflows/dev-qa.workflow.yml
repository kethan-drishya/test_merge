# @format

name: Deploy on qa Env ðŸš€
on:
  push:
    branches: ["dev-qa"]

permissions:
      contents: write
      pull-requests: write
    
jobs:
  run:
    runs-on: [ubuntu-latest]
    # container: docker://dvcorg/cml-py3:latest
    env:
          repo_token: ${{ secrets.REPO_TOKEN }}
          repo_name: ${{ github.event.repository.name }}
  # dependabot:
    # runs-on: ubuntu-latest
    # if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: create repo
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: $repo_token
        run: |
          git config --global user.email "kethan.sarma@drishya.ai"
          git config --global user.name "Kethan Sarma"          
          git clone "https://$GITHUB_ACTOR:$repo_token@github.com/kethan-drishya/$repo_name.git"
          cd $repo_name
          git remote add upstream https://github.com/kethan-drishya/$repo_name.git
          git init
          git config --local remote.origin.url  https://github.com/kethan-drishya/$repo_name.git
          git config --local merge.ours.driver true
    
    - name: create a PR       #Add if else for new and updation
      uses: actions/github-script@v6
      with:
        script: |
          const { repo, owner } = context.repo;
          const result = await github.rest.pulls.create({
            title: '[Example] Simple demo',
            owner,
            repo,
            head: '${{ github.ref_name }}',
            base: 'dev-qa2',
            body: [
              'This PR is auto-generated by',
              '[actions/github-script](https://github.com/actions/github-script).'
            ].join('\n')
          });
          github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['feature', 'automated pr']
            });
    - name: Dependabot metadata
      id: dependabot-metadata
      uses: dependabot/fetch-metadata@v1.1.1
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
      # # Here the PR gets approved.
      # - name: Approve a PR
      #   run: gh pr review --approve "$PR_URL"
      #   env:
      #     PR_URL: ${{ github.event.pull_request.html_url }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # # Finally, this sets the PR to allow auto-merging for patch and minor
      # # updates if all checks pass
    - name: Enable auto-merge for Dependabot PRs
      # if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' }}
      run: gh pr merge --auto --squash "$PR_URL"
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        
  # dependabot:
  #   runs-on: ubuntu-latest
  #   # Checking the actor will prevent your Action run failing on non-Dependabot
  #   # PRs but also ensures that it only does work for Dependabot PRs.
  #   if: ${{ github.actor == 'dependabot[bot]' }}
  #   steps:
  #     # This first step will fail if there's no metadata and so the approval
  #     # will not occur.
  #     - name: Dependabot metadata
  #       id: dependabot-metadata
  #       uses: dependabot/fetch-metadata@v1.1.1
  #       with:
  #         github-token: "${{ secrets.GITHUB_TOKEN }}"
  #     # # Here the PR gets approved.
  #     # - name: Approve a PR
  #     #   run: gh pr review --approve "$PR_URL"
  #     #   env:
  #     #     PR_URL: ${{ github.event.pull_request.html_url }}
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     # # Finally, this sets the PR to allow auto-merging for patch and minor
  #     # # updates if all checks pass
  #     - name: Enable auto-merge for Dependabot PRs
  #       if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' }}
  #       run: gh pr merge --auto --squash "$PR_URL"
  #       env:
  #         PR_URL: ${{ github.event.pull_request.html_url }}
  #         GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
# jobs:
#   run:
#     runs-on: [ubuntu-latest]
#     # container: docker://dvcorg/cml-py3:latest
#     env:
#           repo_token: ${{ secrets.REPO_TOKEN }}
#           repo_name: ${{ github.event.repository.name }}
#     steps:
#       - name: Merging dev-qa into dev-qa2       
#         run: |
#           git config --global user.email "kethan.sarma@drishya.ai"
#           git config --global user.name "Kethan Sarma"
#           git clone "https://$GITHUB_ACTOR:$repo_token@github.com/kethan-drishya/$repo_name.git"
#           cd $repo_name
#           git remote add upstream https://github.com/kethan-drishya/$repo_name.git
#           git init
#           git config --local merge.ours.driver true
#       #     git checkout dev-qa2
#       #     git fetch --all          
#       #     git merge upstream/dev-qa
#       #     git push
      # - name: Create Pull Request
      #   id: cpr
      #   uses: repo-sync/pull-request@v2
      #   with:
      #     source_branch: ""                                 # If blank, default: triggered branch
      #     destination_branch: "dev-qa2"                      # If blank, default: master
      #     pr_title: "Pulling ${{ github.ref }} into dev-qa2" # Title of pull request
      #     pr_body: ":crown: *An automated PR*"              # Full markdown support, requires pr_title to be set
      #     # pr_template: ".github/PULL_REQUEST_TEMPLATE.md"   # Path to pull request template, requires pr_title to be set, excludes pr_body
      #     # pr_reviewer: "wei,worker"                         # Comma-separated list (no spaces)
      #     # pr_assignee: "wei,worker"                         # Comma-separated list (no spaces)
      #     # pr_label: "auto-pr"                               # Comma-separated list (no spaces)
      #     # pr_milestone: "Milestone 1"                       # Milestone name
      #     # pr_draft: true                                    # Creates pull request as draft
      #     # pr_allow_empty: true                     
          # github_token: $repo_token
      # - name: Check outputs
      #   if: ${{ steps.cpr.outputs.pull-request-number }}
      #   run: |
      #     echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
      #     echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}
      # - name: Cleanup
      #   run: |
      #     cd ..
      #     sudo rm -r -f $repo_name



  
